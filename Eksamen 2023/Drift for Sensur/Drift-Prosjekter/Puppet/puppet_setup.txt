Puppet server configuration (ubuntu 20.04, 22.04)

#
##
### logg inn på e-linux-server-XX med SSH
### (feks ssh fredrik@e-linux-server-48.lab.bakka.party)
##
#

# installer puppetserver repo
wget https://apt.puppet.com/puppet7-release-focal.deb
sudo dpkg -i puppet7-release-focal.deb

# oppdater apt, så den får med seg at puppet er tilgjengelig
sudo apt update
sudo apt install puppetserver

# sjekk puppetserver sin status, burde være inaktiv
sudo systemctl status puppetserver.service

# start og enable puppetserver service
# men først må man fortelle puppetserver at den ikke kan 
# bruk all RAMen som servern har, så vi limiter til 1 GB.
# sett disse linjene i filen /etc/default/puppetserver
endre denne linjen fra
JAVA_ARGS="-Xms2g -Xmx2g -Djruby.logger.class=com.puppetlabs.jruby_utils.jruby.Slf4jLogger"
til 
JAVA_ARGS="-Xms1g -Xmx1g -Djruby.logger.class=com.puppetlabs.jruby_utils.jruby.Slf4jLogger"
med "sudo nano /etc/default/puppetserver"
og så lagre filen og gå ut av nano.

#Deretter:
# Endre linjen "127.0.0.1 localhost" til "127.0.0.1 localhost puppet"
# i filen /etc/hosts på din puppet server
# bruk nano. bekreft endringen med "cat /etc/hosts"

#Og så start puppetserver:
sudo systemctl start puppetserver.service
sudo systemctl enable puppetserver.service


# og sjekk at det funker:
 /opt/puppetlabs/bin/puppetserver -v
# burde gi:
# puppetserver version: 7.X.X


#
##
### gå til din klient e-linux-client-XX
##
#

# installer puppet her også, men her skal vi ha "puppet-agent" 
# og ikke puppetserver
# programmer vi da ender opp med å bruke her heter bare "puppet"

wget https://apt.puppet.com/puppet7-release-focal.deb
sudo dpkg -i puppet7-release-focal.deb
sudo apt update
sudo apt install puppet-agent

# legg inn et DNS navn lokalt på din klient som peker til IPen
# til din puppetserver
sudo nano /etc/hosts
# her inne legger du til (uten å fjerne noe annet) denne linjen:
X.X.X.X puppet
# bytt ut X.X.X.X med IPen på din puppet server (e-linux-server-XX)

# sjekk at du får pinget den:
ping -c 1 puppet | grep loss
# og du bør få 0% loss, som betyr at puppet servern svarer

# start og enable servicen til puppet agent
sudo systemctl start puppet.service
sudo systemctl enable puppet.service
sudo /opt/puppetlabs/bin/puppet resource service puppet ensure=running enable=true

#
##
### gå tilbake til din server e-linux-server-XX
##
#

# signer puppet agent (din linux klient) sitt sertifikat
# først, se om den dukker opp her:
sudo /opt/puppetlabs/bin/puppetserver ca list --all
# klienten din request burde stå under "Requested Certificates"
# hvis den gjør det så signer med:
sudo /opt/puppetlabs/bin/puppetserver ca sign --certname <navn på din klient>
# bytt ut <navn på din klient> med det du ser under "list" kommandoen
# feks: sudo /opt/puppetlabs/bin/puppetserver ca sign --certname e-linux-client-48.lab.bakka.party

#
##
### gå til din klient e-linux-klient-XX
##
#

# sjekk om du får kjørt puppet, nå som sertifikatet er signert.
sudo /opt/puppetlabs/bin/puppet agent --test
# dette burde gi noe sånt som
#
# Info: Using environment 'production'
# Info: Retrieving pluginfacts
# Info: Retrieving plugin
# Info: Caching catalog for fredrik-lab-2.lab.bakka.party
# Info: Applying configuration version '1648804309'
# Notice: Applied catalog in 0.02 seconds


###
### Nå skal vi lage en default profil i puppet-servern som installerer en 
### noe for oss (en linux-pakke) til oss og oppretter en bruker
###


# på din puppet server:
# så gjør vi følgende:

cd /etc/puppetlabs/code/environments/production/modules
sudo apt install pdk
sudo pdk new module my_module
# bare trykk enter til den er ferdig
# så går du ytterligere inn i modul-mappen som pdk laget
cd my_module
# og lager en ny klasse
pdk new class my_class

# så, mens du står i mappen "/etc/puppetlabs/code/environments/production/modules/my_module"
# kan du editere denne .pp filen og legge til noe kode:

sudo nano manifests/my_class.pp

# og endre filen til å inkludere en fil-deklerasjon, som vist her:
class my_module::my_class {
    file { '/tmp/hello':
    ensure  => 'present',
    content => "Dette kommer filen til å inneholde\n",
    path    => '/tmp/hello',
    }
}
# så lage i nano og gå ut av nano

# så kan du validere puppet-koden din med pdk
sudo pdk validate

# nå skal vi gå et par hakk opp i filstrukturen, til "manifests" mappa og lage en 
# fil som heter site.pp
cd /etc/puppetlabs/code/environments/production
sudo nano site.pp

# gjør så den filen inneholder:
node default {
  include my_module::my_class
}
# og lagre og gå ut av nano

###
### Gå til din klient VM, e-linux-client-XX
###

# apply puppet config med:
sudo /opt/puppetlabs/bin/puppet agent --test
# NB! "--test" på slutten her betyr ikke at endringer ikke skjer, det betyr
# bare at du får mer verbose output (aka ser hva som skjer)
# ... og du burde se at filen blir laget (/tmp/hello)
cat /tmp/hello


# bonus:
endre /tmp/hello filen på klienten ved å endre på puppet-classen din.
utfør endringen og vis at filen har endret seg

# installer disse pakkene på klienten ved hjelp av puppet:
# mlocate, sl, screen

For å løse dette må man lage en egen puppet class, feks packages.pp
som har samme syntax som my_class.pp
også må man lete på internett etter kode-snutter.
Filen må da inkluderes i site.pp

Vis at du får installert pakkene fra klienten med puppet-kommando.